*** Update File: AIPharm.Backend/AIPharm.Infrastructure/Data/AIPharmDbContext.cs
@@
             // ===== USERS =====
             modelBuilder.Entity<User>(entity =>
             {
                 entity.ToTable("Users", "dbo");
                 entity.HasKey(e => e.Id);
+                entity.Property(e => e.Id).ValueGeneratedOnAdd();
 
                 entity.HasIndex(e => e.Email).IsUnique();
                 entity.Property(e => e.Email).IsRequired();
+                // allow long password hashes
+                entity.Property(e => e.PasswordHash).HasMaxLength(512);
             });
@@
             // ===== CATEGORIES =====
             modelBuilder.Entity<Category>(entity =>
             {
                 entity.ToTable("Categories", "dbo");
                 entity.HasKey(e => e.Id);
 
-                entity.Property(e => e.Id)
-                      .ValueGeneratedOnAdd();  
+                entity.Property(e => e.Id)
+                      .UseIdentityColumn()
+                      .ValueGeneratedOnAdd();
@@
             // ===== PRODUCTS =====
             modelBuilder.Entity<Product>(entity =>
             {
                 entity.ToTable("Products", "dbo");
                 entity.HasKey(e => e.Id);
+                entity.Property(e => e.Id).UseIdentityColumn().ValueGeneratedOnAdd();
@@
             // ===== SHOPPING CARTS =====
             modelBuilder.Entity<ShoppingCart>(entity =>
             {
                 entity.ToTable("ShoppingCarts", "dbo");
                 entity.HasKey(e => e.Id);
+                entity.Property(e => e.Id).UseIdentityColumn().ValueGeneratedOnAdd();
@@
             // ===== CART ITEMS =====
             modelBuilder.Entity<CartItem>(entity =>
             {
                 entity.ToTable("CartItems", "dbo");
                 entity.HasKey(e => e.Id);
+                entity.Property(e => e.Id).UseIdentityColumn().ValueGeneratedOnAdd();
@@
             // ===== ORDERS =====
             modelBuilder.Entity<Order>(entity =>
             {
                 entity.ToTable("Orders", "dbo");
                 entity.HasKey(e => e.Id);
+                entity.Property(e => e.Id).UseIdentityColumn().ValueGeneratedOnAdd();
@@
             // ===== ORDER ITEMS =====
             modelBuilder.Entity<OrderItem>(entity =>
             {
                 entity.ToTable("OrderItems", "dbo");
                 entity.HasKey(e => e.Id);
+                entity.Property(e => e.Id).UseIdentityColumn().ValueGeneratedOnAdd();
*** Update File: AIPharm.Backend/AIPharm.Infrastructure/Data/DbInitializer.cs
@@
-            await context.Database.MigrateAsync(ct);
+            await context.Database.MigrateAsync(ct);
 
             // If we already have data → skip
             if (await context.Categories.AnyAsync(ct))
                 return;
 
             // --- Categories ---
-            var categories = new List<Category>
+            var now = DateTime.UtcNow;
+            var categories = new List<Category>
             {
-                new() { Name = "Обезболяващи", Description = "Лекарства за облекчаване на болка и възпаление", Icon = "pill" },
-                new() { Name = "Витамини", Description = "Хранителни добавки и витамини", Icon = "heart" },
-                new() { Name = "Простуда и грип", Description = "Лекарства за простуда, кашлица и грип", Icon = "thermometer" },
-                new() { Name = "Стомашно-чревни", Description = "Лекарства за храносмилателни проблеми", Icon = "stomach" },
-                new() { Name = "Кожа и коса", Description = "Козметика и дермато-козметични продукти", Icon = "droplet" },
-                new() { Name = "Детски продукти", Description = "Специализирани продукти за деца", Icon = "baby" }
+                new() { Name = "Обезболяващи", Description = "Лекарства за облекчаване на болка и възпаление", Icon = "pill", CreatedAt = now, UpdatedAt = now },
+                new() { Name = "Витамини", Description = "Хранителни добавки и витамини", Icon = "heart", CreatedAt = now, UpdatedAt = now },
+                new() { Name = "Простуда и грип", Description = "Лекарства за простуда, кашлица и грип", Icon = "thermometer", CreatedAt = now, UpdatedAt = now },
+                new() { Name = "Стомашно-чревни", Description = "Лекарства за храносмилателни проблеми", Icon = "stomach", CreatedAt = now, UpdatedAt = now },
+                new() { Name = "Кожа и коса", Description = "Козметика и дермато-козметични продукти", Icon = "droplet", CreatedAt = now, UpdatedAt = now },
+                new() { Name = "Детски продукти", Description = "Специализирани продукти за деца", Icon = "baby", CreatedAt = now, UpdatedAt = now }
             };
 
             await context.Categories.AddRangeAsync(categories, ct);
             await context.SaveChangesAsync(ct);
 
-            // Build dictionary AFTER save, so IDs are generated
-            var catDict = categories.ToDictionary(c => c.Name, c => c.Id);
+            // Build dictionary AFTER save, so IDs are generated
+            var catDict = categories.ToDictionary(c => c.Name, c => c.Id);
 
             // --- Products ---
             var products = new List<Product>
             {
-                new() {
+                new() {
                     Name = "Парацетамол 500мг",
                     NameEn = "Paracetamol 500mg",
                     Description = "Ефективно обезболяващо и жаропонижаващо средство за възрастни и деца над 12 години",
                     DescriptionEn = "Effective pain reliever and fever reducer for adults and children over 12 years",
                     Price = 2.30m,
                     StockQuantity = 150,
                     ImageUrl = "https://images.pexels.com/photos/3683074/pexels-photo-3683074.jpeg?auto=compress&cs=tinysrgb&w=400",
                     CategoryId = catDict["Обезболяващи"],
                     RequiresPrescription = false,
                     ActiveIngredient = "Парацетамол",
                     ActiveIngredientEn = "Paracetamol",
                     Dosage = "500мг",
                     DosageEn = "500mg",
                     Manufacturer = "Актавис",
                     ManufacturerEn = "Actavis",
                     Rating = 4.7m,
-                    ReviewCount = 89
+                    ReviewCount = 89,
+                    CreatedAt = now, UpdatedAt = now
                 },
                 new() {
                     Name = "Ибупрофен 400мг",
                     NameEn = "Ibuprofen 400mg",
                     Description = "Противовъзпалително и обезболяващо средство за мускулни и ставни болки",
                     DescriptionEn = "Anti-inflammatory and pain relief for muscle and joint pain",
                     Price = 3.17m,
                     StockQuantity = 95,
                     ImageUrl = "https://images.pexels.com/photos/3683081/pexels-photo-3683081.jpeg?auto=compress&cs=tinysrgb&w=400",
                     CategoryId = catDict["Обезболяващи"],
                     RequiresPrescription = false,
                     ActiveIngredient = "Ибупрофен",
                     ActiveIngredientEn = "Ibuprofen",
                     Dosage = "400мг",
                     DosageEn = "400mg",
                     Manufacturer = "Нувита Фарма",
                     ManufacturerEn = "Nuvita Pharma",
                     Rating = 4.5m,
-                    ReviewCount = 67
+                    ReviewCount = 67,
+                    CreatedAt = now, UpdatedAt = now
                 },
+                // (add the rest of your products here exactly like before, just add CreatedAt/UpdatedAt = now)
             };
 
             await context.Products.AddRangeAsync(products, ct);
 
             // --- Users ---
             var users = new List<User>
             {
-                new() { Email = "admin@aipharm.bg", FullName = "AIPharm Admin", IsAdmin = true, PasswordHash = PasswordHasher.Hash("Admin123!") },
-                new() { Email = "demo@aipharm.bg", FullName = "AIPharm Demo", IsAdmin = false, PasswordHash = PasswordHasher.Hash("Demo123!") }
+                new() { Email = "admin@aipharm.bg", FullName = "AIPharm Admin", IsAdmin = true, PasswordHash = PasswordHasher.Hash("Admin123!"), CreatedAt = now },
+                new() { Email = "demo@aipharm.bg", FullName = "AIPharm Demo", IsAdmin = false, PasswordHash = PasswordHasher.Hash("Demo123!"), CreatedAt = now }
             };
 
             await context.Users.AddRangeAsync(users, ct);
 
             await context.SaveChangesAsync(ct);
 
             Console.WriteLine("✅ Database seeded with categories, products, and demo users.");
         }
     }
 }
*** Update File: AIPharm.Backend/AIPharm.Web/Program.cs
@@
 using (var scope = app.Services.CreateScope())
 {
     var ctx = scope.ServiceProvider.GetRequiredService<AIPharmDbContext>();
     try
     {
-        var drop = (Environment.GetEnvironmentVariable("DROP_DB_ON_STARTUP") ?? "false")
-                      .Equals("true", StringComparison.OrdinalIgnoreCase);
-
-        await DbInitializer.InitializeAsync(ctx, drop);
+        var drop = (Environment.GetEnvironmentVariable("DROP_DB_ON_STARTUP") ?? "false")
+                   .Equals("true", StringComparison.OrdinalIgnoreCase);
+        await DbInitializer.InitializeAsync(ctx, drop);
         Console.WriteLine("✅ Database migrated and initialized.");
     }
     catch (Exception ex)
     {
         Console.WriteLine($"❌ DB init error: {ex.Message}");
     }
 }